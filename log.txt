
> speakmcp@0.1.3 dev /Users/ajjoobandi/Development/SpeakMCP
> electron-vite dev --watch -- "d"

vite v5.4.19 building SSR bundle for development...

watching for file changes...

build started...
transforming...
✓ 407 modules transformed.
rendering chunks...
out/main/oauth-callback-server-fzqzUOMc.js    6.84 kB
out/main/models-service-f1-vHHIr.js          14.01 kB
out/main/index.js                           236.61 kB
out/main/updater-BNC3ff3E.js                475.43 kB
built in 722ms.

build the electron main process successfully

-----

vite v5.4.19 building SSR bundle for development...

watching for file changes...

build started...
transforming...
✓ 2 modules transformed.
rendering chunks...
out/preload/index.mjs  2.93 kB
built in 8ms.

build the electron preload files successfully

-----

dev server running for the electron renderer process at:

  ➜  Local:   http://localhost:5173/
  ➜  Network: use --host to expose

start electron app...

[DEBUG] Enabled: LLM, TOOLS, KEYBINDS, APP (argv: d)
[2025-09-03T01:37:27.325Z] [DEBUG][APP] SpeakMCP starting up...
[2025-09-03T01:37:27.325Z] [DEBUG][APP] Deep link handling initialized
[2025-09-03T01:37:27.333Z] [DEBUG][APP] Accessibility granted: true
[2025-09-03T01:37:27.334Z] [DEBUG][APP] Application menu created
[2025-09-03T01:37:27.334Z] [DEBUG][APP] IPC main registered
[2025-09-03T01:37:27.346Z] [DEBUG][APP] Serve protocol registered
[2025-09-03T01:37:27.346Z] [DEBUG][APP] Creating main window...
[2025-09-03T01:37:27.387Z] [DEBUG][APP] Main window created
[2025-09-03T01:37:27.387Z] [DEBUG][APP] Creating panel window...
[2025-09-03T01:37:27.395Z] [DEBUG][APP] Panel window created
[2025-09-03T01:37:27.397Z] [DEBUG][KEYBINDS] Starting keyboard event listener with rdev path: /Users/ajjoobandi/Development/SpeakMCP/resources/bin/speakmcp-rs
[2025-09-03T01:37:27.397Z] [DEBUG][APP] Keyboard event listener started
[2025-09-03T01:37:27.403Z] [DEBUG][APP] System tray initialized
[2025-09-03T01:37:27.403Z] [DEBUG][TOOLS] MCP Service initialization starting
[2025-09-03T01:37:27.403Z] [DEBUG][TOOLS] Skipping server rube - runtime disabled by user
[2025-09-03T01:37:27.403Z] [DEBUG][TOOLS] Found 2 servers to initialize [ 'github', 'desktop-commander' ]
[2025-09-03T01:37:27.403Z] [DEBUG][TOOLS] Starting initialization of server: github
[2025-09-03T01:37:27.404Z] [DEBUG][TOOLS] Initializing server: github {
  transport: 'stdio',
  command: 'npx',
  args: [ '-y', '@modelcontextprotocol/server-github' ],
  env: [ 'GITHUB_PERSONAL_ACCESS_TOKEN' ]
}
Skip checkForUpdates because application is not packed and dev update config is not forced
Skip checkForUpdates because application is not packed and dev update config is not forced
[2025-09-03T01:37:32.440Z] [DEBUG][TOOLS] Server github connected successfully {
  toolCount: 26,
  tools: [
    {
      name: 'create_or_update_file',
      description: 'Create or update a single file in a GitHub repository'
    },
    {
      name: 'search_repositories',
      description: 'Search for GitHub repositories'
    },
    {
      name: 'create_repository',
      description: 'Create a new GitHub repository in your account'
    },
    {
      name: 'get_file_contents',
      description: 'Get the contents of a file or directory from a GitHub repository'
    },
    {
      name: 'push_files',
      description: 'Push multiple files to a GitHub repository in a single commit'
    },
    {
      name: 'create_issue',
      description: 'Create a new issue in a GitHub repository'
    },
    {
      name: 'create_pull_request',
      description: 'Create a new pull request in a GitHub repository'
    },
    {
      name: 'fork_repository',
      description: 'Fork a GitHub repository to your account or specified organization'
    },
    {
      name: 'create_branch',
      description: 'Create a new branch in a GitHub repository'
    },
    {
      name: 'list_commits',
      description: 'Get list of commits of a branch in a GitHub repository'
    },
    {
      name: 'list_issues',
      description: 'List issues in a GitHub repository with filtering options'
    },
    {
      name: 'update_issue',
      description: 'Update an existing issue in a GitHub repository'
    },
    {
      name: 'add_issue_comment',
      description: 'Add a comment to an existing issue'
    },
    {
      name: 'search_code',
      description: 'Search for code across GitHub repositories'
    },
    {
      name: 'search_issues',
      description: 'Search for issues and pull requests across GitHub repositories'
    },
    { name: 'search_users', description: 'Search for users on GitHub' },
    {
      name: 'get_issue',
      description: 'Get details of a specific issue in a GitHub repository.'
    },
    {
      name: 'get_pull_request',
      description: 'Get details of a specific pull request'
    },
    {
      name: 'list_pull_requests',
      description: 'List and filter repository pull requests'
    },
    {
      name: 'create_pull_request_review',
      description: 'Create a review on a pull request'
    },
    { name: 'merge_pull_request', description: 'Merge a pull request' },
    {
      name: 'get_pull_request_files',
      description: 'Get the list of files changed in a pull request'
    },
    {
      name: 'get_pull_request_status',
      description: 'Get the combined status of all status checks for a pull request'
    },
    {
      name: 'update_pull_request_branch',
      description: 'Update a pull request branch with the latest changes from the base branch'
    },
    {
      name: 'get_pull_request_comments',
      description: 'Get the review comments on a pull request'
    },
    {
      name: 'get_pull_request_reviews',
      description: 'Get the reviews on a pull request'
    }
  ]
}
[2025-09-03T01:37:32.441Z] [DEBUG][TOOLS] Successfully initialized server: github
[2025-09-03T01:37:32.441Z] [DEBUG][TOOLS] Starting initialization of server: desktop-commander
[2025-09-03T01:37:32.441Z] [DEBUG][TOOLS] Initializing server: desktop-commander {
  transport: 'stdio',
  command: 'npx',
  args: [ '@wonderwhy-er/desktop-commander@latest' ],
  env: []
}
[2025-09-03T01:37:32.670Z] [DEBUG][KEYBINDS] Ctrl key pressed, isPressedCtrlKey = true
[2025-09-03T01:37:32.670Z] [DEBUG][KEYBINDS] Config change #1: {
  agentKillSwitchEnabled: true,
  agentKillSwitchHotkey: 'ctrl-shift-q',
  textInputEnabled: true,
  textInputShortcut: 'ctrl-t',
  mcpToolsEnabled: true,
  mcpToolsShortcut: 'hold-ctrl-alt',
  shortcut: undefined
}
[2025-09-03T01:37:33.277Z] [DEBUG][KEYBINDS] Text input triggered: Ctrl+T
Skip checkForUpdates because application is not packed and dev update config is not forced
[2025-09-03T01:37:33.437Z] [DEBUG][KEYBINDS] Ctrl key released, isPressedCtrlKey = false
[2025-09-03T01:37:39.769Z] [DEBUG][TOOLS] MCP Service initialization starting
[2025-09-03T01:37:39.769Z] [DEBUG][TOOLS] Skipping server rube - runtime disabled by user
[2025-09-03T01:37:39.769Z] [DEBUG][TOOLS] Found 2 servers to initialize [ 'github', 'desktop-commander' ]
[2025-09-03T01:37:39.769Z] [DEBUG][TOOLS] Starting initialization of server: github
[2025-09-03T01:37:39.770Z] [DEBUG][TOOLS] Initializing server: github {
  transport: 'stdio',
  command: 'npx',
  args: [ '-y', '@modelcontextprotocol/server-github' ],
  env: [ 'GITHUB_PERSONAL_ACCESS_TOKEN' ]
}
[2025-09-03T01:37:42.453Z] [DEBUG][TOOLS] Server initialization failed: desktop-commander {
  error: 'Connection timeout after 10000ms',
  stack: 'Error: Connection timeout after 10000ms\n' +
    '    at Timeout._onTimeout (file:///Users/ajjoobandi/Development/SpeakMCP/out/main/index.js:2573:26)\n' +
    '    at listOnTimeout (node:internal/timers:581:17)\n' +
    '    at process.processTimers (node:internal/timers:519:7)'
}
[2025-09-03T01:37:42.454Z] [DEBUG][TOOLS] Failed to initialize server: desktop-commander Error: Connection timeout after 10000ms
    at Timeout._onTimeout (file:///Users/ajjoobandi/Development/SpeakMCP/out/main/index.js:2573:26)
    at listOnTimeout (node:internal/timers:581:17)
    at process.processTimers (node:internal/timers:519:7)
[2025-09-03T01:37:42.455Z] [DEBUG][TOOLS] MCP Service initialization complete. Total tools available: 26
[2025-09-03T01:37:42.455Z] [DEBUG][APP] MCP service initialized successfully
[2025-09-03T01:37:46.874Z] [DEBUG][TOOLS] Server github connected successfully {
  toolCount: 26,
  tools: [
    {
      name: 'create_or_update_file',
      description: 'Create or update a single file in a GitHub repository'
    },
    {
      name: 'search_repositories',
      description: 'Search for GitHub repositories'
    },
    {
      name: 'create_repository',
      description: 'Create a new GitHub repository in your account'
    },
    {
      name: 'get_file_contents',
      description: 'Get the contents of a file or directory from a GitHub repository'
    },
    {
      name: 'push_files',
      description: 'Push multiple files to a GitHub repository in a single commit'
    },
    {
      name: 'create_issue',
      description: 'Create a new issue in a GitHub repository'
    },
    {
      name: 'create_pull_request',
      description: 'Create a new pull request in a GitHub repository'
    },
    {
      name: 'fork_repository',
      description: 'Fork a GitHub repository to your account or specified organization'
    },
    {
      name: 'create_branch',
      description: 'Create a new branch in a GitHub repository'
    },
    {
      name: 'list_commits',
      description: 'Get list of commits of a branch in a GitHub repository'
    },
    {
      name: 'list_issues',
      description: 'List issues in a GitHub repository with filtering options'
    },
    {
      name: 'update_issue',
      description: 'Update an existing issue in a GitHub repository'
    },
    {
      name: 'add_issue_comment',
      description: 'Add a comment to an existing issue'
    },
    {
      name: 'search_code',
      description: 'Search for code across GitHub repositories'
    },
    {
      name: 'search_issues',
      description: 'Search for issues and pull requests across GitHub repositories'
    },
    { name: 'search_users', description: 'Search for users on GitHub' },
    {
      name: 'get_issue',
      description: 'Get details of a specific issue in a GitHub repository.'
    },
    {
      name: 'get_pull_request',
      description: 'Get details of a specific pull request'
    },
    {
      name: 'list_pull_requests',
      description: 'List and filter repository pull requests'
    },
    {
      name: 'create_pull_request_review',
      description: 'Create a review on a pull request'
    },
    { name: 'merge_pull_request', description: 'Merge a pull request' },
    {
      name: 'get_pull_request_files',
      description: 'Get the list of files changed in a pull request'
    },
    {
      name: 'get_pull_request_status',
      description: 'Get the combined status of all status checks for a pull request'
    },
    {
      name: 'update_pull_request_branch',
      description: 'Update a pull request branch with the latest changes from the base branch'
    },
    {
      name: 'get_pull_request_comments',
      description: 'Get the review comments on a pull request'
    },
    {
      name: 'get_pull_request_reviews',
      description: 'Get the reviews on a pull request'
    }
  ]
}
[2025-09-03T01:37:46.874Z] [DEBUG][TOOLS] Successfully initialized server: github
[2025-09-03T01:37:46.875Z] [DEBUG][TOOLS] Starting initialization of server: desktop-commander
[2025-09-03T01:37:46.875Z] [DEBUG][TOOLS] Initializing server: desktop-commander {
  transport: 'stdio',
  command: 'npx',
  args: [ '@wonderwhy-er/desktop-commander@latest' ],
  env: []
}
[2025-09-03T01:37:50.874Z] [DEBUG][TOOLS] Server initialization failed: desktop-commander {
  error: 'MCP error -32000: Connection closed',
  stack: 'McpError: MCP error -32000: Connection closed\n' +
    '    at Client._onclose (file:///Users/ajjoobandi/Development/SpeakMCP/node_modules/.pnpm/@modelcontextprotocol+sdk@1.17.4/node_modules/@modelcontextprotocol/sdk/dist/esm/shared/protocol.js:106:23)\n' +
    '    at _transport.onclose (file:///Users/ajjoobandi/Development/SpeakMCP/node_modules/.pnpm/@modelcontextprotocol+sdk@1.17.4/node_modules/@modelcontextprotocol/sdk/dist/esm/shared/protocol.js:73:18)\n' +
    '    at ChildProcess.<anonymous> (file:///Users/ajjoobandi/Development/SpeakMCP/node_modules/.pnpm/@modelcontextprotocol+sdk@1.17.4/node_modules/@modelcontextprotocol/sdk/dist/esm/client/stdio.js:95:77)\n' +
    '    at ChildProcess.emit (node:events:519:28)\n' +
    '    at maybeClose (node:internal/child_process:1105:16)\n' +
    '    at Socket.<anonymous> (node:internal/child_process:457:11)\n' +
    '    at Socket.emit (node:events:519:28)\n' +
    '    at Pipe.<anonymous> (node:net:339:12)'
}
[2025-09-03T01:37:50.874Z] [DEBUG][TOOLS] Failed to initialize server: desktop-commander McpError: MCP error -32000: Connection closed
    at Client._onclose (file:///Users/ajjoobandi/Development/SpeakMCP/node_modules/.pnpm/@modelcontextprotocol+sdk@1.17.4/node_modules/@modelcontextprotocol/sdk/dist/esm/shared/protocol.js:106:23)
    at _transport.onclose (file:///Users/ajjoobandi/Development/SpeakMCP/node_modules/.pnpm/@modelcontextprotocol+sdk@1.17.4/node_modules/@modelcontextprotocol/sdk/dist/esm/shared/protocol.js:73:18)
    at ChildProcess.<anonymous> (file:///Users/ajjoobandi/Development/SpeakMCP/node_modules/.pnpm/@modelcontextprotocol+sdk@1.17.4/node_modules/@modelcontextprotocol/sdk/dist/esm/client/stdio.js:95:77)
    at ChildProcess.emit (node:events:519:28)
    at maybeClose (node:internal/child_process:1105:16)
    at Socket.<anonymous> (node:internal/child_process:457:11)
    at Socket.emit (node:events:519:28)
    at Pipe.<anonymous> (node:net:339:12) {
  code: -32000,
  data: undefined
}
[2025-09-03T01:37:50.874Z] [DEBUG][TOOLS] MCP Service initialization complete. Total tools available: 52
[2025-09-03T01:37:50.875Z] [DEBUG][LLM] === LLM CALL START ===
[2025-09-03T01:37:50.875Z] [DEBUG][LLM] Messages → {
  count: 2,
  totalChars: 9625,
  messages: [
    {
      role: 'system',
      content: 'You are an intelligent AI assistant capable of executing tools to help users accomplish complex tasks. You operate autonomously and work iteratively until goals are fully achieved.\n' +
        '\n' +
        'CORE PRINCIPLES:\n' +
        "- Work autonomously until the user's request is completely resolved\n" +
        '- Use available tools iteratively and strategically to gather information and execute actions\n' +
        '- Use exact tool names from the available tools list (including server prefixes like "server:tool_name")\n' +
        '- Prefer using tools to gather information rather than asking users for details\n' +
        "- Continue working until the user's request is fully satisfied - only stop when the task is complete\n" +
        '\n' +
        'TOOL USAGE PHILOSOPHY:\n' +
        '- ALWAYS follow tool schemas exactly as specified with all required parameters\n' +
        '- NEVER call tools that are not explicitly provided in the available tools list\n' +
        '- If you need additional information that you can get via tool calls, prefer that over asking the user\n' +
        '- Use tools proactively to explore and understand the context before making changes\n' +
        '- When making code changes, ensure they can be executed immediately by the user\n' +
        '\n' +
        '# Tone and style\n' +
        'You should be concise, direct, and to the point.\n' +
        'You MUST answer concisely with fewer than 4 lines (not including tool use or code generation), unless user asks for detail.\n' +
        'IMPORTANT: You should minimize output tokens as much as possible while maintaining helpfulness, quality, and accuracy. Only address the specific query or task at hand, avoiding tangential information unless absolutely critical for completing the request. If you can answer in 1-3 sentences or a short paragraph, please do.\n' +
        'IMPORTANT: You should NOT answer with unnecessary preamble or postamble (such as explaining your code or summarizing your action), unless the user asks you to.\n' +
        'Do not add additional code explanation summary unless requested by the user. After working on a file, just stop, rather than providing an explanation of what you did.\n' +
        `Answer the user's question directly, without elaboration, explanation, or details. One word answers are best. Avoid introductions, conclusions, and explanations. You MUST avoid text before/after your response, such as "The answer is <answer>.", "Here is the content of the file..." or "Based on the information provided, the answer is..." or "Here is what I will do next...". Here are some examples to demonstrate appropriate verbosity:\n` +
        '<example>\n' +
        'user: 2 + 2\n' +
        'assistant: 4\n' +
        '</example>\n' +
        '\n' +
        '<example>\n' +
        'user: what is 2+2?\n' +
        'assistant: 4\n' +
        '</example>\n' +
        '\n' +
        '<example>\n' +
        'user: is 11 a prime number?\n' +
        'assistant: Yes\n' +
        '</example>\n' +
        '\n' +
        '<example>\n' +
        'user: what command should I run to list files in the current directory?\n' +
        'assistant: ls\n' +
        '</example>\n' +
        '\n' +
        '<example>\n' +
        'user: what command should I run to watch files in the current directory?\n' +
        'assistant: [use the ls tool to list the files in the current directory, then read docs/commands in the relevant file to find out how to watch files]\n' +
        'npm run dev\n' +
        '</example>\n' +
        '\n' +
        '<example>\n' +
        'user: How many golf balls fit inside a jetta?\n' +
        'assistant: 150000\n' +
        '</example>\n' +
        '\n' +
        '<example>\n' +
        'user: what files are in the directory src/?\n' +
        'assistant: [runs ls and sees foo.c, bar.c, baz.c]\n' +
        'user: which file contains the implementation of foo?\n' +
        'assistant: src/foo.c\n' +
        '</example>\n' +
        '\n' +
        'RESPONSE FORMAT:\n' +
        'For tool calls:\n' +
        '{\n' +
        '  "toolCalls": [\n' +
        '    {\n' +
        '      "name": "exact_tool_name_from_available_list",\n' +
        '      "arguments": { "param1": "value1", "param2": "value2" }\n' +
        '    }\n' +
        '  ],\n' +
        `  "content": "Clear explanation of what you're doing and why",\n` +
        '  "needsMoreWork": true\n' +
        '}\n' +
        '\n' +
        'For final responses (no more tools needed):\n' +
        '{\n' +
        '  "content": "Your comprehensive final response with results",\n' +
        '  "needsMoreWork": false\n' +
        '}\n' +
        '\n' +
        'AGENT MODE - AUTONOMOUS OPERATION:\n' +
        'You can see tool results and make follow-up calls. Work iteratively and thoroughly:\n' +
        '\n' +
        'WORKFLOW:\n' +
        "1. Analyze the user's request comprehensively\n" +
        '2. Gather necessary information using available tools\n' +
        '3. Execute appropriate tools in logical sequence\n' +
        '4. Review results and determine next steps\n' +
        '5. Continue iterating until the goal is fully achieved\n' +
        '6. Only set needsMoreWork: false when the task is completely resolved\n' +
        '\n' +
        '\n' +
        '\n' +
        'AVAILABLE TOOLS:\n' +
        '- github:create_or_update_file: Create or update a single file in a GitHub repository\n' +
        '  Parameters: {owner: string (required), repo: string (required), path: string (required), content: string (required), message: string (required), branch: string (required), sha: string}\n' +
        '- github:search_repositories: Search for GitHub repositories\n' +
        '  Parameters: {query: string (required), page: number, perPage: number}\n' +
        '- github:create_repository: Create a new GitHub repository in your account\n' +
        '  Parameters: {name: string (required), description: string, private: boolean, autoInit: boolean}\n' +
        '- github:get_file_contents: Get the contents of a file or directory from a GitHub repository\n' +
        '  Parameters: {owner: string (required), repo: string (required), path: string (required), branch: string}\n' +
        '- github:push_files: Push multiple files to a GitHub repository in a single commit\n' +
        '  Parameters: {owner: string (required), repo: string (required), branch: string (required), files: array (required), message: string (required)}\n' +
        '- github:create_issue: Create a new issue in a GitHub repository\n' +
        '  Parameters: {owner: string (required), repo: string (required), title: string (required), body: string, assignees: array, milestone: number, labels: array}\n' +
        '- github:create_pull_request: Create a new pull request in a GitHub repository\n' +
        '  Parameters: {owner: string (required), repo: string (required), title: string (required), body: string, head: string (required), base: string (required), draft: boolean, maintainer_can_modify: boolean}\n' +
        '- github:fork_repository: Fork a GitHub repository to your account or specified organization\n' +
        '  Parameters: {owner: string (required), repo: string (required), organization: string}\n' +
        '- github:create_branch: Create a new branch in a GitHub repository\n' +
        '  Parameters: {owner: string (required), repo: string (required), branch: string (required), from_branch: string}\n' +
        '- github:list_commits: Get list of commits of a branch in a GitHub repository\n' +
        '  Parameters: {owner: string (required), repo: string (required), sha: string, page: number, perPage: number}\n' +
        '- github:list_issues: List issues in a GitHub repository with filtering options\n' +
        '  Parameters: {owner: string (required), repo: string (required), direction: string, labels: array, page: number, per_page: number, since: string, sort: string, state: string}\n' +
        '- github:update_issue: Update an existing issue in a GitHub repository\n' +
        '  Parameters: {owner: string (required), repo: string (required), issue_number: number (required), title: string, body: string, assignees: array, milestone: number, labels: array, state: string}\n' +
        '- github:add_issue_comment: Add a comment to an existing issue\n' +
        '  Parameters: {owner: string (required), repo: string (required), issue_number: number (required), body: string (required)}\n' +
        '- github:search_code: Search for code across GitHub repositories\n' +
        '  Parameters: {q: string (required), order: string, page: number, per_page: number}\n' +
        '- github:search_issues: Search for issues and pull requests across GitHub repositories\n' +
        '  Parameters: {q: string (required), order: string, page: number, per_page: number, sort: string}\n' +
        '- github:search_users: Search for users on GitHub\n' +
        '  Parameters: {q: string (required), order: string, page: number, per_page: number, sort: string}\n' +
        '- github:get_issue: Get details of a specific issue in a GitHub repository.\n' +
        '  Parameters: {owner: string (required), repo: string (required), issue_number: number (required)}\n' +
        '- github:get_pull_request: Get details of a specific pull request\n' +
        '  Parameters: {owner: string (required), repo: string (required), pull_number: number (required)}\n' +
        '- github:list_pull_requests: List and filter repository pull requests\n' +
        '  Parameters: {owner: string (required), repo: string (required), state: string, head: string, base: string, sort: string, direction: string, per_page: number, page: number}\n' +
        '- github:create_pull_request_review: Create a review on a pull request\n' +
        '  Parameters: {owner: string (required), repo: string (required), pull_number: number (required), commit_id: string, body: string (required), event: string (required), comments: array}\n' +
        '- github:merge_pull_request: Merge a pull request\n' +
        '  Parameters: {owner: string (required), repo: string (required), pull_number: number (required), commit_title: string, commit_message: string, merge_method: string}\n' +
        '- github:get_pull_request_files: Get the list of files changed in a pull request\n' +
        '  Parameters: {owner: string (required), repo: string (required), pull_number: number (required)}\n' +
        '- github:get_pull_request_status: Get the combined status of all status checks for a pull request\n' +
        '  Parameters: {owner: string (required), repo: string (required), pull_number: number (required)}\n' +
        '- github:update_pull_request_branch: Update a pull request branch with the latest changes from the base branch\n' +
        '  Parameters: {owner: string (required), repo: string (required), pull_number: number (required), expected_head_sha: string}\n' +
        '- github:get_pull_request_comments: Get the review comments on a pull request\n' +
        '  Parameters: {owner: string (required), repo: string (required), pull_number: number (required)}\n' +
        '- github:get_pull_request_reviews: Get the reviews on a pull request\n' +
        '  Parameters: {owner: string (required), repo: string (required), pull_number: number (required)}IMPORTANT GUIDELINES:\n' +
        'DOUBLE AND TRIPLE CHECK WORK BEFORE CLAIMING FINISHED\n' +
        '\n' +
        'user has a stream_status.txt on Desktop \n' +
        '\n' +
        'if user asks for transcription use command `tr <file_name.ext>`\n' +
        '\n' +
        'user is working on repo aj47/SpeakMCP\n' +
        '\n' +
        'desktop is at location `~/Desktop`'
    },
    {
      role: 'user',
      content: 'count to three in three seperate user messages'
    }
  ]
}
[2025-09-03T01:37:50.876Z] [DEBUG][LLM] Attempting JSON Schema mode for model: z-ai/glm-4.5
[2025-09-03T01:37:50.876Z] [DEBUG][LLM] === OPENAI API REQUEST ===
[2025-09-03T01:37:50.876Z] [DEBUG][LLM] HTTP Request {
  url: 'https://openrouter.ai/api/v1/chat/completions',
  model: 'z-ai/glm-4.5',
  messagesCount: 2,
  responseFormat: {
    type: 'json_schema',
    json_schema: {
      name: 'LLMToolCallResponse',
      description: 'Response format for LLM tool calls with optional tool execution and content',
      schema: [Object],
      strict: true
    }
  },
  estimatedTokens: 2407,
  totalPromptLength: 9625,
  contextWarning: null
}
[2025-09-03T01:37:50.876Z] [DEBUG][LLM] Request Body (truncated) {
  model: 'z-ai/glm-4.5',
  messages: [
    {
      role: 'system',
      content: 'You are an intelligent AI assistant capable of executing tools to help users accomplish complex tasks. You operate autonomously and work iteratively until goals are fully achieved.\n' +
        '\n' +
        'CORE PRINCIPLES:\n' +
        '-... [9579 chars]'
    },
    {
      role: 'user',
      content: 'count to three in three seperate user messages'
    }
  ],
  temperature: 0,
  frequency_penalty: 0.5,
  seed: 1,
  response_format: {
    type: 'json_schema',
    json_schema: {
      name: 'LLMToolCallResponse',
      description: 'Response format for LLM tool calls with optional tool execution and content',
      schema: [Object],
      strict: true
    }
  }
}
[2025-09-03T01:37:56.035Z] [DEBUG][LLM] HTTP Response {
  id: 'gen-1756863473-h5CTUvUwCKwsXeAlNICD',
  provider: 'Chutes',
  model: 'z-ai/glm-4.5',
  object: 'chat.completion',
  created: 1756863473,
  choices: [
    {
      logprobs: null,
      finish_reason: 'stop',
      native_finish_reason: 'stop',
      index: 0,
      message: [Object]
    }
  ],
  usage: {
    prompt_tokens: 2173,
    completion_tokens: 100,
    total_tokens: 2273,
    prompt_tokens_details: null
  }
}
[2025-09-03T01:37:56.035Z] [DEBUG][LLM] Raw API response structure: {
  hasChoices: true,
  choicesLength: 1,
  firstChoiceExists: true,
  hasMessage: true,
  hasContent: true
}
[2025-09-03T01:37:56.035Z] [DEBUG][LLM] Extracted JSON object { content: '1', needsMoreWork: true }
[2025-09-03T01:37:56.035Z] [DEBUG][LLM] JSON object has toolCalls: false
[2025-09-03T01:37:56.035Z] [DEBUG][LLM] JSON object has content: true
[2025-09-03T01:37:56.035Z] [DEBUG][LLM] Response ← { content: '1', needsMoreWork: true }
[2025-09-03T01:37:56.035Z] [DEBUG][LLM] === LLM CALL END ===
[2025-09-03T01:37:56.035Z] [DEBUG][TOOLS] Planned tool calls from LLM []
[2025-09-03T01:37:56.035Z] [DEBUG][LLM] === LLM CALL START ===
[2025-09-03T01:37:56.035Z] [DEBUG][LLM] Messages → {
  count: 4,
  totalChars: 9650,
  messages: [
    {
      role: 'system',
      content: 'You are an intelligent AI assistant capable of executing tools to help users accomplish complex tasks. You operate autonomously and work iteratively until goals are fully achieved.\n' +
        '\n' +
        'CORE PRINCIPLES:\n' +
        "- Work autonomously until the user's request is completely resolved\n" +
        '- Use available tools iteratively and strategically to gather information and execute actions\n' +
        '- Use exact tool names from the available tools list (including server prefixes like "server:tool_name")\n' +
        '- Prefer using tools to gather information rather than asking users for details\n' +
        "- Continue working until the user's request is fully satisfied - only stop when the task is complete\n" +
        '\n' +
        'TOOL USAGE PHILOSOPHY:\n' +
        '- ALWAYS follow tool schemas exactly as specified with all required parameters\n' +
        '- NEVER call tools that are not explicitly provided in the available tools list\n' +
        '- If you need additional information that you can get via tool calls, prefer that over asking the user\n' +
        '- Use tools proactively to explore and understand the context before making changes\n' +
        '- When making code changes, ensure they can be executed immediately by the user\n' +
        '\n' +
        '# Tone and style\n' +
        'You should be concise, direct, and to the point.\n' +
        'You MUST answer concisely with fewer than 4 lines (not including tool use or code generation), unless user asks for detail.\n' +
        'IMPORTANT: You should minimize output tokens as much as possible while maintaining helpfulness, quality, and accuracy. Only address the specific query or task at hand, avoiding tangential information unless absolutely critical for completing the request. If you can answer in 1-3 sentences or a short paragraph, please do.\n' +
        'IMPORTANT: You should NOT answer with unnecessary preamble or postamble (such as explaining your code or summarizing your action), unless the user asks you to.\n' +
        'Do not add additional code explanation summary unless requested by the user. After working on a file, just stop, rather than providing an explanation of what you did.\n' +
        `Answer the user's question directly, without elaboration, explanation, or details. One word answers are best. Avoid introductions, conclusions, and explanations. You MUST avoid text before/after your response, such as "The answer is <answer>.", "Here is the content of the file..." or "Based on the information provided, the answer is..." or "Here is what I will do next...". Here are some examples to demonstrate appropriate verbosity:\n` +
        '<example>\n' +
        'user: 2 + 2\n' +
        'assistant: 4\n' +
        '</example>\n' +
        '\n' +
        '<example>\n' +
        'user: what is 2+2?\n' +
        'assistant: 4\n' +
        '</example>\n' +
        '\n' +
        '<example>\n' +
        'user: is 11 a prime number?\n' +
        'assistant: Yes\n' +
        '</example>\n' +
        '\n' +
        '<example>\n' +
        'user: what command should I run to list files in the current directory?\n' +
        'assistant: ls\n' +
        '</example>\n' +
        '\n' +
        '<example>\n' +
        'user: what command should I run to watch files in the current directory?\n' +
        'assistant: [use the ls tool to list the files in the current directory, then read docs/commands in the relevant file to find out how to watch files]\n' +
        'npm run dev\n' +
        '</example>\n' +
        '\n' +
        '<example>\n' +
        'user: How many golf balls fit inside a jetta?\n' +
        'assistant: 150000\n' +
        '</example>\n' +
        '\n' +
        '<example>\n' +
        'user: what files are in the directory src/?\n' +
        'assistant: [runs ls and sees foo.c, bar.c, baz.c]\n' +
        'user: which file contains the implementation of foo?\n' +
        'assistant: src/foo.c\n' +
        '</example>\n' +
        '\n' +
        'RESPONSE FORMAT:\n' +
        'For tool calls:\n' +
        '{\n' +
        '  "toolCalls": [\n' +
        '    {\n' +
        '      "name": "exact_tool_name_from_available_list",\n' +
        '      "arguments": { "param1": "value1", "param2": "value2" }\n' +
        '    }\n' +
        '  ],\n' +
        `  "content": "Clear explanation of what you're doing and why",\n` +
        '  "needsMoreWork": true\n' +
        '}\n' +
        '\n' +
        'For final responses (no more tools needed):\n' +
        '{\n' +
        '  "content": "Your comprehensive final response with results",\n' +
        '  "needsMoreWork": false\n' +
        '}\n' +
        '\n' +
        'AGENT MODE - AUTONOMOUS OPERATION:\n' +
        'You can see tool results and make follow-up calls. Work iteratively and thoroughly:\n' +
        '\n' +
        'WORKFLOW:\n' +
        "1. Analyze the user's request comprehensively\n" +
        '2. Gather necessary information using available tools\n' +
        '3. Execute appropriate tools in logical sequence\n' +
        '4. Review results and determine next steps\n' +
        '5. Continue iterating until the goal is fully achieved\n' +
        '6. Only set needsMoreWork: false when the task is completely resolved\n' +
        '\n' +
        '\n' +
        '\n' +
        'AVAILABLE TOOLS:\n' +
        '- github:create_or_update_file: Create or update a single file in a GitHub repository\n' +
        '  Parameters: {owner: string (required), repo: string (required), path: string (required), content: string (required), message: string (required), branch: string (required), sha: string}\n' +
        '- github:search_repositories: Search for GitHub repositories\n' +
        '  Parameters: {query: string (required), page: number, perPage: number}\n' +
        '- github:create_repository: Create a new GitHub repository in your account\n' +
        '  Parameters: {name: string (required), description: string, private: boolean, autoInit: boolean}\n' +
        '- github:get_file_contents: Get the contents of a file or directory from a GitHub repository\n' +
        '  Parameters: {owner: string (required), repo: string (required), path: string (required), branch: string}\n' +
        '- github:push_files: Push multiple files to a GitHub repository in a single commit\n' +
        '  Parameters: {owner: string (required), repo: string (required), branch: string (required), files: array (required), message: string (required)}\n' +
        '- github:create_issue: Create a new issue in a GitHub repository\n' +
        '  Parameters: {owner: string (required), repo: string (required), title: string (required), body: string, assignees: array, milestone: number, labels: array}\n' +
        '- github:create_pull_request: Create a new pull request in a GitHub repository\n' +
        '  Parameters: {owner: string (required), repo: string (required), title: string (required), body: string, head: string (required), base: string (required), draft: boolean, maintainer_can_modify: boolean}\n' +
        '- github:fork_repository: Fork a GitHub repository to your account or specified organization\n' +
        '  Parameters: {owner: string (required), repo: string (required), organization: string}\n' +
        '- github:create_branch: Create a new branch in a GitHub repository\n' +
        '  Parameters: {owner: string (required), repo: string (required), branch: string (required), from_branch: string}\n' +
        '- github:list_commits: Get list of commits of a branch in a GitHub repository\n' +
        '  Parameters: {owner: string (required), repo: string (required), sha: string, page: number, perPage: number}\n' +
        '- github:list_issues: List issues in a GitHub repository with filtering options\n' +
        '  Parameters: {owner: string (required), repo: string (required), direction: string, labels: array, page: number, per_page: number, since: string, sort: string, state: string}\n' +
        '- github:update_issue: Update an existing issue in a GitHub repository\n' +
        '  Parameters: {owner: string (required), repo: string (required), issue_number: number (required), title: string, body: string, assignees: array, milestone: number, labels: array, state: string}\n' +
        '- github:add_issue_comment: Add a comment to an existing issue\n' +
        '  Parameters: {owner: string (required), repo: string (required), issue_number: number (required), body: string (required)}\n' +
        '- github:search_code: Search for code across GitHub repositories\n' +
        '  Parameters: {q: string (required), order: string, page: number, per_page: number}\n' +
        '- github:search_issues: Search for issues and pull requests across GitHub repositories\n' +
        '  Parameters: {q: string (required), order: string, page: number, per_page: number, sort: string}\n' +
        '- github:search_users: Search for users on GitHub\n' +
        '  Parameters: {q: string (required), order: string, page: number, per_page: number, sort: string}\n' +
        '- github:get_issue: Get details of a specific issue in a GitHub repository.\n' +
        '  Parameters: {owner: string (required), repo: string (required), issue_number: number (required)}\n' +
        '- github:get_pull_request: Get details of a specific pull request\n' +
        '  Parameters: {owner: string (required), repo: string (required), pull_number: number (required)}\n' +
        '- github:list_pull_requests: List and filter repository pull requests\n' +
        '  Parameters: {owner: string (required), repo: string (required), state: string, head: string, base: string, sort: string, direction: string, per_page: number, page: number}\n' +
        '- github:create_pull_request_review: Create a review on a pull request\n' +
        '  Parameters: {owner: string (required), repo: string (required), pull_number: number (required), commit_id: string, body: string (required), event: string (required), comments: array}\n' +
        '- github:merge_pull_request: Merge a pull request\n' +
        '  Parameters: {owner: string (required), repo: string (required), pull_number: number (required), commit_title: string, commit_message: string, merge_method: string}\n' +
        '- github:get_pull_request_files: Get the list of files changed in a pull request\n' +
        '  Parameters: {owner: string (required), repo: string (required), pull_number: number (required)}\n' +
        '- github:get_pull_request_status: Get the combined status of all status checks for a pull request\n' +
        '  Parameters: {owner: string (required), repo: string (required), pull_number: number (required)}\n' +
        '- github:update_pull_request_branch: Update a pull request branch with the latest changes from the base branch\n' +
        '  Parameters: {owner: string (required), repo: string (required), pull_number: number (required), expected_head_sha: string}\n' +
        '- github:get_pull_request_comments: Get the review comments on a pull request\n' +
        '  Parameters: {owner: string (required), repo: string (required), pull_number: number (required)}\n' +
        '- github:get_pull_request_reviews: Get the reviews on a pull request\n' +
        '  Parameters: {owner: string (required), repo: string (required), pull_number: number (required)}IMPORTANT GUIDELINES:\n' +
        'DOUBLE AND TRIPLE CHECK WORK BEFORE CLAIMING FINISHED\n' +
        '\n' +
        'user has a stream_status.txt on Desktop \n' +
        '\n' +
        'if user asks for transcription use command `tr <file_name.ext>`\n' +
        '\n' +
        'user is working on repo aj47/SpeakMCP\n' +
        '\n' +
        'desktop is at location `~/Desktop`'
    },
    {
      role: 'user',
      content: 'count to three in three seperate user messages'
    },
    { role: 'assistant', content: '1' },
    { role: 'user', content: 'Tool execution results:\n' }
  ]
}
[2025-09-03T01:37:56.036Z] [DEBUG][LLM] Attempting JSON Schema mode for model: z-ai/glm-4.5
[2025-09-03T01:37:56.036Z] [DEBUG][LLM] === OPENAI API REQUEST ===
[2025-09-03T01:37:56.036Z] [DEBUG][LLM] HTTP Request {
  url: 'https://openrouter.ai/api/v1/chat/completions',
  model: 'z-ai/glm-4.5',
  messagesCount: 4,
  responseFormat: {
    type: 'json_schema',
    json_schema: {
      name: 'LLMToolCallResponse',
      description: 'Response format for LLM tool calls with optional tool execution and content',
      schema: [Object],
      strict: true
    }
  },
  estimatedTokens: 2413,
  totalPromptLength: 9650,
  contextWarning: null
}
[2025-09-03T01:37:56.036Z] [DEBUG][LLM] Request Body (truncated) {
  model: 'z-ai/glm-4.5',
  messages: [
    {
      role: 'system',
      content: 'You are an intelligent AI assistant capable of executing tools to help users accomplish complex tasks. You operate autonomously and work iteratively until goals are fully achieved.\n' +
        '\n' +
        'CORE PRINCIPLES:\n' +
        '-... [9579 chars]'
    },
    {
      role: 'user',
      content: 'count to three in three seperate user messages'
    },
    { role: 'assistant', content: '1' },
    { role: 'user', content: 'Tool execution results:\n' }
  ],
  temperature: 0,
  frequency_penalty: 0.5,
  seed: 1,
  response_format: {
    type: 'json_schema',
    json_schema: {
      name: 'LLMToolCallResponse',
      description: 'Response format for LLM tool calls with optional tool execution and content',
      schema: [Object],
      strict: true
    }
  }
}
[2025-09-03T01:37:58.178Z] [DEBUG][LLM] HTTP Response {
  id: 'gen-1756863476-42bQYMhUnQlJWmPB6Hnn',
  provider: 'Parasail',
  model: 'z-ai/glm-4.5',
  object: 'chat.completion',
  created: 1756863476,
  choices: [
    {
      logprobs: null,
      finish_reason: 'stop',
      native_finish_reason: 'stop',
      index: 0,
      message: [Object]
    }
  ],
  usage: {
    prompt_tokens: 2185,
    completion_tokens: 24,
    total_tokens: 2209,
    prompt_tokens_details: null
  }
}
[2025-09-03T01:37:58.178Z] [DEBUG][LLM] Raw API response structure: {
  hasChoices: true,
  choicesLength: 1,
  firstChoiceExists: true,
  hasMessage: true,
  hasContent: true
}
[2025-09-03T01:37:58.178Z] [DEBUG][LLM] Extracted JSON object { toolCalls: [], content: '1', needsMoreWork: true }
[2025-09-03T01:37:58.178Z] [DEBUG][LLM] JSON object has toolCalls: true
[2025-09-03T01:37:58.178Z] [DEBUG][LLM] JSON object has content: true
[2025-09-03T01:37:58.178Z] [DEBUG][LLM] Response ← { toolCalls: [], content: '1', needsMoreWork: true }
[2025-09-03T01:37:58.178Z] [DEBUG][LLM] === LLM CALL END ===
[2025-09-03T01:37:58.178Z] [DEBUG][TOOLS] Planned tool calls from LLM []
[2025-09-03T01:37:58.178Z] [DEBUG][LLM] === LLM CALL START ===
[2025-09-03T01:37:58.179Z] [DEBUG][LLM] Messages → {
  count: 6,
  totalChars: 9761,
  messages: [
    {
      role: 'system',
      content: 'You are an intelligent AI assistant capable of executing tools to help users accomplish complex tasks. You operate autonomously and work iteratively until goals are fully achieved.\n' +
        '\n' +
        'CORE PRINCIPLES:\n' +
        "- Work autonomously until the user's request is completely resolved\n" +
        '- Use available tools iteratively and strategically to gather information and execute actions\n' +
        '- Use exact tool names from the available tools list (including server prefixes like "server:tool_name")\n' +
        '- Prefer using tools to gather information rather than asking users for details\n' +
        "- Continue working until the user's request is fully satisfied - only stop when the task is complete\n" +
        '\n' +
        'TOOL USAGE PHILOSOPHY:\n' +
        '- ALWAYS follow tool schemas exactly as specified with all required parameters\n' +
        '- NEVER call tools that are not explicitly provided in the available tools list\n' +
        '- If you need additional information that you can get via tool calls, prefer that over asking the user\n' +
        '- Use tools proactively to explore and understand the context before making changes\n' +
        '- When making code changes, ensure they can be executed immediately by the user\n' +
        '\n' +
        '# Tone and style\n' +
        'You should be concise, direct, and to the point.\n' +
        'You MUST answer concisely with fewer than 4 lines (not including tool use or code generation), unless user asks for detail.\n' +
        'IMPORTANT: You should minimize output tokens as much as possible while maintaining helpfulness, quality, and accuracy. Only address the specific query or task at hand, avoiding tangential information unless absolutely critical for completing the request. If you can answer in 1-3 sentences or a short paragraph, please do.\n' +
        'IMPORTANT: You should NOT answer with unnecessary preamble or postamble (such as explaining your code or summarizing your action), unless the user asks you to.\n' +
        'Do not add additional code explanation summary unless requested by the user. After working on a file, just stop, rather than providing an explanation of what you did.\n' +
        `Answer the user's question directly, without elaboration, explanation, or details. One word answers are best. Avoid introductions, conclusions, and explanations. You MUST avoid text before/after your response, such as "The answer is <answer>.", "Here is the content of the file..." or "Based on the information provided, the answer is..." or "Here is what I will do next...". Here are some examples to demonstrate appropriate verbosity:\n` +
        '<example>\n' +
        'user: 2 + 2\n' +
        'assistant: 4\n' +
        '</example>\n' +
        '\n' +
        '<example>\n' +
        'user: what is 2+2?\n' +
        'assistant: 4\n' +
        '</example>\n' +
        '\n' +
        '<example>\n' +
        'user: is 11 a prime number?\n' +
        'assistant: Yes\n' +
        '</example>\n' +
        '\n' +
        '<example>\n' +
        'user: what command should I run to list files in the current directory?\n' +
        'assistant: ls\n' +
        '</example>\n' +
        '\n' +
        '<example>\n' +
        'user: what command should I run to watch files in the current directory?\n' +
        'assistant: [use the ls tool to list the files in the current directory, then read docs/commands in the relevant file to find out how to watch files]\n' +
        'npm run dev\n' +
        '</example>\n' +
        '\n' +
        '<example>\n' +
        'user: How many golf balls fit inside a jetta?\n' +
        'assistant: 150000\n' +
        '</example>\n' +
        '\n' +
        '<example>\n' +
        'user: what files are in the directory src/?\n' +
        'assistant: [runs ls and sees foo.c, bar.c, baz.c]\n' +
        'user: which file contains the implementation of foo?\n' +
        'assistant: src/foo.c\n' +
        '</example>\n' +
        '\n' +
        'RESPONSE FORMAT:\n' +
        'For tool calls:\n' +
        '{\n' +
        '  "toolCalls": [\n' +
        '    {\n' +
        '      "name": "exact_tool_name_from_available_list",\n' +
        '      "arguments": { "param1": "value1", "param2": "value2" }\n' +
        '    }\n' +
        '  ],\n' +
        `  "content": "Clear explanation of what you're doing and why",\n` +
        '  "needsMoreWork": true\n' +
        '}\n' +
        '\n' +
        'For final responses (no more tools needed):\n' +
        '{\n' +
        '  "content": "Your comprehensive final response with results",\n' +
        '  "needsMoreWork": false\n' +
        '}\n' +
        '\n' +
        'AGENT MODE - AUTONOMOUS OPERATION:\n' +
        'You can see tool results and make follow-up calls. Work iteratively and thoroughly:\n' +
        '\n' +
        'WORKFLOW:\n' +
        "1. Analyze the user's request comprehensively\n" +
        '2. Gather necessary information using available tools\n' +
        '3. Execute appropriate tools in logical sequence\n' +
        '4. Review results and determine next steps\n' +
        '5. Continue iterating until the goal is fully achieved\n' +
        '6. Only set needsMoreWork: false when the task is completely resolved\n' +
        '\n' +
        '\n' +
        '\n' +
        'AVAILABLE TOOLS:\n' +
        '- github:create_or_update_file: Create or update a single file in a GitHub repository\n' +
        '  Parameters: {owner: string (required), repo: string (required), path: string (required), content: string (required), message: string (required), branch: string (required), sha: string}\n' +
        '- github:search_repositories: Search for GitHub repositories\n' +
        '  Parameters: {query: string (required), page: number, perPage: number}\n' +
        '- github:create_repository: Create a new GitHub repository in your account\n' +
        '  Parameters: {name: string (required), description: string, private: boolean, autoInit: boolean}\n' +
        '- github:get_file_contents: Get the contents of a file or directory from a GitHub repository\n' +
        '  Parameters: {owner: string (required), repo: string (required), path: string (required), branch: string}\n' +
        '- github:push_files: Push multiple files to a GitHub repository in a single commit\n' +
        '  Parameters: {owner: string (required), repo: string (required), branch: string (required), files: array (required), message: string (required)}\n' +
        '- github:create_issue: Create a new issue in a GitHub repository\n' +
        '  Parameters: {owner: string (required), repo: string (required), title: string (required), body: string, assignees: array, milestone: number, labels: array}\n' +
        '- github:create_pull_request: Create a new pull request in a GitHub repository\n' +
        '  Parameters: {owner: string (required), repo: string (required), title: string (required), body: string, head: string (required), base: string (required), draft: boolean, maintainer_can_modify: boolean}\n' +
        '- github:fork_repository: Fork a GitHub repository to your account or specified organization\n' +
        '  Parameters: {owner: string (required), repo: string (required), organization: string}\n' +
        '- github:create_branch: Create a new branch in a GitHub repository\n' +
        '  Parameters: {owner: string (required), repo: string (required), branch: string (required), from_branch: string}\n' +
        '- github:list_commits: Get list of commits of a branch in a GitHub repository\n' +
        '  Parameters: {owner: string (required), repo: string (required), sha: string, page: number, perPage: number}\n' +
        '- github:list_issues: List issues in a GitHub repository with filtering options\n' +
        '  Parameters: {owner: string (required), repo: string (required), direction: string, labels: array, page: number, per_page: number, since: string, sort: string, state: string}\n' +
        '- github:update_issue: Update an existing issue in a GitHub repository\n' +
        '  Parameters: {owner: string (required), repo: string (required), issue_number: number (required), title: string, body: string, assignees: array, milestone: number, labels: array, state: string}\n' +
        '- github:add_issue_comment: Add a comment to an existing issue\n' +
        '  Parameters: {owner: string (required), repo: string (required), issue_number: number (required), body: string (required)}\n' +
        '- github:search_code: Search for code across GitHub repositories\n' +
        '  Parameters: {q: string (required), order: string, page: number, per_page: number}\n' +
        '- github:search_issues: Search for issues and pull requests across GitHub repositories\n' +
        '  Parameters: {q: string (required), order: string, page: number, per_page: number, sort: string}\n' +
        '- github:search_users: Search for users on GitHub\n' +
        '  Parameters: {q: string (required), order: string, page: number, per_page: number, sort: string}\n' +
        '- github:get_issue: Get details of a specific issue in a GitHub repository.\n' +
        '  Parameters: {owner: string (required), repo: string (required), issue_number: number (required)}\n' +
        '- github:get_pull_request: Get details of a specific pull request\n' +
        '  Parameters: {owner: string (required), repo: string (required), pull_number: number (required)}\n' +
        '- github:list_pull_requests: List and filter repository pull requests\n' +
        '  Parameters: {owner: string (required), repo: string (required), state: string, head: string, base: string, sort: string, direction: string, per_page: number, page: number}\n' +
        '- github:create_pull_request_review: Create a review on a pull request\n' +
        '  Parameters: {owner: string (required), repo: string (required), pull_number: number (required), commit_id: string, body: string (required), event: string (required), comments: array}\n' +
        '- github:merge_pull_request: Merge a pull request\n' +
        '  Parameters: {owner: string (required), repo: string (required), pull_number: number (required), commit_title: string, commit_message: string, merge_method: string}\n' +
        '- github:get_pull_request_files: Get the list of files changed in a pull request\n' +
        '  Parameters: {owner: string (required), repo: string (required), pull_number: number (required)}\n' +
        '- github:get_pull_request_status: Get the combined status of all status checks for a pull request\n' +
        '  Parameters: {owner: string (required), repo: string (required), pull_number: number (required)}\n' +
        '- github:update_pull_request_branch: Update a pull request branch with the latest changes from the base branch\n' +
        '  Parameters: {owner: string (required), repo: string (required), pull_number: number (required), expected_head_sha: string}\n' +
        '- github:get_pull_request_comments: Get the review comments on a pull request\n' +
        '  Parameters: {owner: string (required), repo: string (required), pull_number: number (required)}\n' +
        '- github:get_pull_request_reviews: Get the reviews on a pull request\n' +
        '  Parameters: {owner: string (required), repo: string (required), pull_number: number (required)}IMPORTANT GUIDELINES:\n' +
        'DOUBLE AND TRIPLE CHECK WORK BEFORE CLAIMING FINISHED\n' +
        '\n' +
        'user has a stream_status.txt on Desktop \n' +
        '\n' +
        'if user asks for transcription use command `tr <file_name.ext>`\n' +
        '\n' +
        'user is working on repo aj47/SpeakMCP\n' +
        '\n' +
        'desktop is at location `~/Desktop`'
    },
    {
      role: 'user',
      content: 'count to three in three seperate user messages'
    },
    { role: 'assistant', content: '1' },
    { role: 'user', content: 'Tool execution results:\n' },
    { role: 'assistant', content: '1' },
    {
      role: 'user',
      content: 'Please either take action using available tools or explicitly set needsMoreWork=false if the task is complete.'
    }
  ]
}
[2025-09-03T01:37:58.179Z] [DEBUG][LLM] Attempting JSON Schema mode for model: z-ai/glm-4.5
[2025-09-03T01:37:58.179Z] [DEBUG][LLM] === OPENAI API REQUEST ===
[2025-09-03T01:37:58.179Z] [DEBUG][LLM] HTTP Request {
  url: 'https://openrouter.ai/api/v1/chat/completions',
  model: 'z-ai/glm-4.5',
  messagesCount: 6,
  responseFormat: {
    type: 'json_schema',
    json_schema: {
      name: 'LLMToolCallResponse',
      description: 'Response format for LLM tool calls with optional tool execution and content',
      schema: [Object],
      strict: true
    }
  },
  estimatedTokens: 2441,
  totalPromptLength: 9761,
  contextWarning: null
}
[2025-09-03T01:37:58.179Z] [DEBUG][LLM] Request Body (truncated) {
  model: 'z-ai/glm-4.5',
  messages: [
    {
      role: 'system',
      content: 'You are an intelligent AI assistant capable of executing tools to help users accomplish complex tasks. You operate autonomously and work iteratively until goals are fully achieved.\n' +
        '\n' +
        'CORE PRINCIPLES:\n' +
        '-... [9579 chars]'
    },
    {
      role: 'user',
      content: 'count to three in three seperate user messages'
    },
    { role: 'assistant', content: '1' },
    { role: 'user', content: 'Tool execution results:\n' },
    { role: 'assistant', content: '1' },
    {
      role: 'user',
      content: 'Please either take action using available tools or explicitly set needsMoreWork=false if the task is complete.'
    }
  ],
  temperature: 0,
  frequency_penalty: 0.5,
  seed: 1,
  response_format: {
    type: 'json_schema',
    json_schema: {
      name: 'LLMToolCallResponse',
      description: 'Response format for LLM tool calls with optional tool execution and content',
      schema: [Object],
      strict: true
    }
  }
}
[2025-09-03T01:38:01.078Z] [DEBUG][LLM] HTTP Response {
  id: 'gen-1756863479-IyeM9K9JNeKd3qh4iR4A',
  provider: 'Parasail',
  model: 'z-ai/glm-4.5',
  object: 'chat.completion',
  created: 1756863479,
  choices: [
    {
      logprobs: null,
      finish_reason: 'stop',
      native_finish_reason: 'stop',
      index: 0,
      message: [Object]
    }
  ],
  usage: {
    prompt_tokens: 2213,
    completion_tokens: 18,
    total_tokens: 2231,
    prompt_tokens_details: null
  }
}
[2025-09-03T01:38:01.078Z] [DEBUG][LLM] Raw API response structure: {
  hasChoices: true,
  choicesLength: 1,
  firstChoiceExists: true,
  hasMessage: true,
  hasContent: true
}
[2025-09-03T01:38:01.078Z] [DEBUG][LLM] Extracted JSON object { content: '2', needsMoreWork: true }
[2025-09-03T01:38:01.078Z] [DEBUG][LLM] JSON object has toolCalls: false
[2025-09-03T01:38:01.078Z] [DEBUG][LLM] JSON object has content: true
[2025-09-03T01:38:01.078Z] [DEBUG][LLM] Response ← { content: '2', needsMoreWork: true }
[2025-09-03T01:38:01.078Z] [DEBUG][LLM] === LLM CALL END ===
[2025-09-03T01:38:01.078Z] [DEBUG][TOOLS] Planned tool calls from LLM []
[2025-09-03T01:38:01.078Z] [DEBUG][LLM] === LLM CALL START ===
[2025-09-03T01:38:01.078Z] [DEBUG][LLM] Messages → {
  count: 8,
  totalChars: 9786,
  messages: [
    {
      role: 'system',
      content: 'You are an intelligent AI assistant capable of executing tools to help users accomplish complex tasks. You operate autonomously and work iteratively until goals are fully achieved.\n' +
        '\n' +
        'CORE PRINCIPLES:\n' +
        "- Work autonomously until the user's request is completely resolved\n" +
        '- Use available tools iteratively and strategically to gather information and execute actions\n' +
        '- Use exact tool names from the available tools list (including server prefixes like "server:tool_name")\n' +
        '- Prefer using tools to gather information rather than asking users for details\n' +
        "- Continue working until the user's request is fully satisfied - only stop when the task is complete\n" +
        '\n' +
        'TOOL USAGE PHILOSOPHY:\n' +
        '- ALWAYS follow tool schemas exactly as specified with all required parameters\n' +
        '- NEVER call tools that are not explicitly provided in the available tools list\n' +
        '- If you need additional information that you can get via tool calls, prefer that over asking the user\n' +
        '- Use tools proactively to explore and understand the context before making changes\n' +
        '- When making code changes, ensure they can be executed immediately by the user\n' +
        '\n' +
        '# Tone and style\n' +
        'You should be concise, direct, and to the point.\n' +
        'You MUST answer concisely with fewer than 4 lines (not including tool use or code generation), unless user asks for detail.\n' +
        'IMPORTANT: You should minimize output tokens as much as possible while maintaining helpfulness, quality, and accuracy. Only address the specific query or task at hand, avoiding tangential information unless absolutely critical for completing the request. If you can answer in 1-3 sentences or a short paragraph, please do.\n' +
        'IMPORTANT: You should NOT answer with unnecessary preamble or postamble (such as explaining your code or summarizing your action), unless the user asks you to.\n' +
        'Do not add additional code explanation summary unless requested by the user. After working on a file, just stop, rather than providing an explanation of what you did.\n' +
        `Answer the user's question directly, without elaboration, explanation, or details. One word answers are best. Avoid introductions, conclusions, and explanations. You MUST avoid text before/after your response, such as "The answer is <answer>.", "Here is the content of the file..." or "Based on the information provided, the answer is..." or "Here is what I will do next...". Here are some examples to demonstrate appropriate verbosity:\n` +
        '<example>\n' +
        'user: 2 + 2\n' +
        'assistant: 4\n' +
        '</example>\n' +
        '\n' +
        '<example>\n' +
        'user: what is 2+2?\n' +
        'assistant: 4\n' +
        '</example>\n' +
        '\n' +
        '<example>\n' +
        'user: is 11 a prime number?\n' +
        'assistant: Yes\n' +
        '</example>\n' +
        '\n' +
        '<example>\n' +
        'user: what command should I run to list files in the current directory?\n' +
        'assistant: ls\n' +
        '</example>\n' +
        '\n' +
        '<example>\n' +
        'user: what command should I run to watch files in the current directory?\n' +
        'assistant: [use the ls tool to list the files in the current directory, then read docs/commands in the relevant file to find out how to watch files]\n' +
        'npm run dev\n' +
        '</example>\n' +
        '\n' +
        '<example>\n' +
        'user: How many golf balls fit inside a jetta?\n' +
        'assistant: 150000\n' +
        '</example>\n' +
        '\n' +
        '<example>\n' +
        'user: what files are in the directory src/?\n' +
        'assistant: [runs ls and sees foo.c, bar.c, baz.c]\n' +
        'user: which file contains the implementation of foo?\n' +
        'assistant: src/foo.c\n' +
        '</example>\n' +
        '\n' +
        'RESPONSE FORMAT:\n' +
        'For tool calls:\n' +
        '{\n' +
        '  "toolCalls": [\n' +
        '    {\n' +
        '      "name": "exact_tool_name_from_available_list",\n' +
        '      "arguments": { "param1": "value1", "param2": "value2" }\n' +
        '    }\n' +
        '  ],\n' +
        `  "content": "Clear explanation of what you're doing and why",\n` +
        '  "needsMoreWork": true\n' +
        '}\n' +
        '\n' +
        'For final responses (no more tools needed):\n' +
        '{\n' +
        '  "content": "Your comprehensive final response with results",\n' +
        '  "needsMoreWork": false\n' +
        '}\n' +
        '\n' +
        'AGENT MODE - AUTONOMOUS OPERATION:\n' +
        'You can see tool results and make follow-up calls. Work iteratively and thoroughly:\n' +
        '\n' +
        'WORKFLOW:\n' +
        "1. Analyze the user's request comprehensively\n" +
        '2. Gather necessary information using available tools\n' +
        '3. Execute appropriate tools in logical sequence\n' +
        '4. Review results and determine next steps\n' +
        '5. Continue iterating until the goal is fully achieved\n' +
        '6. Only set needsMoreWork: false when the task is completely resolved\n' +
        '\n' +
        '\n' +
        '\n' +
        'AVAILABLE TOOLS:\n' +
        '- github:create_or_update_file: Create or update a single file in a GitHub repository\n' +
        '  Parameters: {owner: string (required), repo: string (required), path: string (required), content: string (required), message: string (required), branch: string (required), sha: string}\n' +
        '- github:search_repositories: Search for GitHub repositories\n' +
        '  Parameters: {query: string (required), page: number, perPage: number}\n' +
        '- github:create_repository: Create a new GitHub repository in your account\n' +
        '  Parameters: {name: string (required), description: string, private: boolean, autoInit: boolean}\n' +
        '- github:get_file_contents: Get the contents of a file or directory from a GitHub repository\n' +
        '  Parameters: {owner: string (required), repo: string (required), path: string (required), branch: string}\n' +
        '- github:push_files: Push multiple files to a GitHub repository in a single commit\n' +
        '  Parameters: {owner: string (required), repo: string (required), branch: string (required), files: array (required), message: string (required)}\n' +
        '- github:create_issue: Create a new issue in a GitHub repository\n' +
        '  Parameters: {owner: string (required), repo: string (required), title: string (required), body: string, assignees: array, milestone: number, labels: array}\n' +
        '- github:create_pull_request: Create a new pull request in a GitHub repository\n' +
        '  Parameters: {owner: string (required), repo: string (required), title: string (required), body: string, head: string (required), base: string (required), draft: boolean, maintainer_can_modify: boolean}\n' +
        '- github:fork_repository: Fork a GitHub repository to your account or specified organization\n' +
        '  Parameters: {owner: string (required), repo: string (required), organization: string}\n' +
        '- github:create_branch: Create a new branch in a GitHub repository\n' +
        '  Parameters: {owner: string (required), repo: string (required), branch: string (required), from_branch: string}\n' +
        '- github:list_commits: Get list of commits of a branch in a GitHub repository\n' +
        '  Parameters: {owner: string (required), repo: string (required), sha: string, page: number, perPage: number}\n' +
        '- github:list_issues: List issues in a GitHub repository with filtering options\n' +
        '  Parameters: {owner: string (required), repo: string (required), direction: string, labels: array, page: number, per_page: number, since: string, sort: string, state: string}\n' +
        '- github:update_issue: Update an existing issue in a GitHub repository\n' +
        '  Parameters: {owner: string (required), repo: string (required), issue_number: number (required), title: string, body: string, assignees: array, milestone: number, labels: array, state: string}\n' +
        '- github:add_issue_comment: Add a comment to an existing issue\n' +
        '  Parameters: {owner: string (required), repo: string (required), issue_number: number (required), body: string (required)}\n' +
        '- github:search_code: Search for code across GitHub repositories\n' +
        '  Parameters: {q: string (required), order: string, page: number, per_page: number}\n' +
        '- github:search_issues: Search for issues and pull requests across GitHub repositories\n' +
        '  Parameters: {q: string (required), order: string, page: number, per_page: number, sort: string}\n' +
        '- github:search_users: Search for users on GitHub\n' +
        '  Parameters: {q: string (required), order: string, page: number, per_page: number, sort: string}\n' +
        '- github:get_issue: Get details of a specific issue in a GitHub repository.\n' +
        '  Parameters: {owner: string (required), repo: string (required), issue_number: number (required)}\n' +
        '- github:get_pull_request: Get details of a specific pull request\n' +
        '  Parameters: {owner: string (required), repo: string (required), pull_number: number (required)}\n' +
        '- github:list_pull_requests: List and filter repository pull requests\n' +
        '  Parameters: {owner: string (required), repo: string (required), state: string, head: string, base: string, sort: string, direction: string, per_page: number, page: number}\n' +
        '- github:create_pull_request_review: Create a review on a pull request\n' +
        '  Parameters: {owner: string (required), repo: string (required), pull_number: number (required), commit_id: string, body: string (required), event: string (required), comments: array}\n' +
        '- github:merge_pull_request: Merge a pull request\n' +
        '  Parameters: {owner: string (required), repo: string (required), pull_number: number (required), commit_title: string, commit_message: string, merge_method: string}\n' +
        '- github:get_pull_request_files: Get the list of files changed in a pull request\n' +
        '  Parameters: {owner: string (required), repo: string (required), pull_number: number (required)}\n' +
        '- github:get_pull_request_status: Get the combined status of all status checks for a pull request\n' +
        '  Parameters: {owner: string (required), repo: string (required), pull_number: number (required)}\n' +
        '- github:update_pull_request_branch: Update a pull request branch with the latest changes from the base branch\n' +
        '  Parameters: {owner: string (required), repo: string (required), pull_number: number (required), expected_head_sha: string}\n' +
        '- github:get_pull_request_comments: Get the review comments on a pull request\n' +
        '  Parameters: {owner: string (required), repo: string (required), pull_number: number (required)}\n' +
        '- github:get_pull_request_reviews: Get the reviews on a pull request\n' +
        '  Parameters: {owner: string (required), repo: string (required), pull_number: number (required)}IMPORTANT GUIDELINES:\n' +
        'DOUBLE AND TRIPLE CHECK WORK BEFORE CLAIMING FINISHED\n' +
        '\n' +
        'user has a stream_status.txt on Desktop \n' +
        '\n' +
        'if user asks for transcription use command `tr <file_name.ext>`\n' +
        '\n' +
        'user is working on repo aj47/SpeakMCP\n' +
        '\n' +
        'desktop is at location `~/Desktop`'
    },
    {
      role: 'user',
      content: 'count to three in three seperate user messages'
    },
    { role: 'assistant', content: '1' },
    { role: 'user', content: 'Tool execution results:\n' },
    { role: 'assistant', content: '1' },
    {
      role: 'user',
      content: 'Please either take action using available tools or explicitly set needsMoreWork=false if the task is complete.'
    },
    { role: 'assistant', content: '2' },
    { role: 'user', content: 'Tool execution results:\n' }
  ]
}
[2025-09-03T01:38:01.079Z] [DEBUG][LLM] Attempting JSON Schema mode for model: z-ai/glm-4.5
[2025-09-03T01:38:01.079Z] [DEBUG][LLM] === OPENAI API REQUEST ===
[2025-09-03T01:38:01.079Z] [DEBUG][LLM] HTTP Request {
  url: 'https://openrouter.ai/api/v1/chat/completions',
  model: 'z-ai/glm-4.5',
  messagesCount: 8,
  responseFormat: {
    type: 'json_schema',
    json_schema: {
      name: 'LLMToolCallResponse',
      description: 'Response format for LLM tool calls with optional tool execution and content',
      schema: [Object],
      strict: true
    }
  },
  estimatedTokens: 2447,
  totalPromptLength: 9786,
  contextWarning: null
}
[2025-09-03T01:38:01.079Z] [DEBUG][LLM] Request Body (truncated) {
  model: 'z-ai/glm-4.5',
  messages: [
    {
      role: 'system',
      content: 'You are an intelligent AI assistant capable of executing tools to help users accomplish complex tasks. You operate autonomously and work iteratively until goals are fully achieved.\n' +
        '\n' +
        'CORE PRINCIPLES:\n' +
        '-... [9579 chars]'
    },
    {
      role: 'user',
      content: 'count to three in three seperate user messages'
    },
    { role: 'assistant', content: '1' },
    { role: 'user', content: 'Tool execution results:\n' },
    { role: 'assistant', content: '1' },
    {
      role: 'user',
      content: 'Please either take action using available tools or explicitly set needsMoreWork=false if the task is complete.'
    },
    { role: 'assistant', content: '2' },
    { role: 'user', content: 'Tool execution results:\n' }
  ],
  temperature: 0,
  frequency_penalty: 0.5,
  seed: 1,
  response_format: {
    type: 'json_schema',
    json_schema: {
      name: 'LLMToolCallResponse',
      description: 'Response format for LLM tool calls with optional tool execution and content',
      schema: [Object],
      strict: true
    }
  }
}
[2025-09-03T01:38:02.171Z] [DEBUG][LLM] HTTP Response {
  id: 'gen-1756863481-P018hXn8g8ddgRf3cbOX',
  provider: 'GMICloud',
  model: 'z-ai/glm-4.5',
  object: 'chat.completion',
  created: 1756863481,
  choices: [
    {
      logprobs: null,
      finish_reason: null,
      native_finish_reason: null,
      index: 0,
      message: [Object]
    }
  ],
  usage: { prompt_tokens: 2254, completion_tokens: 0, total_tokens: 2254 }
}
[2025-09-03T01:38:02.171Z] [DEBUG][LLM] Raw API response structure: {
  hasChoices: true,
  choicesLength: 1,
  firstChoiceExists: true,
  hasMessage: true,
  hasContent: false
}
[2025-09-03T01:38:02.171Z] [DEBUG][LLM] Empty response details: {
  response: {
    id: 'gen-1756863481-P018hXn8g8ddgRf3cbOX',
    provider: 'GMICloud',
    model: 'z-ai/glm-4.5',
    object: 'chat.completion',
    created: 1756863481,
    choices: [ [Object] ],
    usage: { prompt_tokens: 2254, completion_tokens: 0, total_tokens: 2254 }
  },
  choices: [
    {
      logprobs: null,
      finish_reason: null,
      native_finish_reason: null,
      index: 0,
      message: [Object]
    }
  ],
  firstChoice: {
    logprobs: null,
    finish_reason: null,
    native_finish_reason: null,
    index: 0,
    message: { role: 'assistant', content: '', refusal: null, reasoning: null }
  },
  message: { role: 'assistant', content: '', refusal: null, reasoning: null },
  content: ''
}
[2025-09-03T01:38:02.171Z] [DEBUG][LLM] Response ← { content: '', needsMoreWork: false }
[2025-09-03T01:38:02.171Z] [DEBUG][LLM] === LLM CALL END ===
[2025-09-03T01:38:02.171Z] [DEBUG][TOOLS] Planned tool calls from LLM []
Skip checkForUpdates because application is not packed and dev update config is not forced
[2025-09-03T01:38:10.579Z] [DEBUG][KEYBINDS] Ctrl key pressed, isPressedCtrlKey = true
[2025-09-03T01:38:10.719Z] [DEBUG][KEYBINDS] Keyboard listener process exited: { code: null, signal: 'SIGINT' }
